<?xml version="1.0" encoding="utf-8"?>
<namespace name="UnBurningUtility" platform="Win32">
  <const name="Win32ImportSuffix" type="Char" file="UnBurningUtility.pas" line="11">
    <value>
      $57
    </value>
  </const>
  <const name="DEFAULT_MAX_RETRY" type="Integer" file="UnBurningUtility.pas" line="12">
    <value>
      $6
    </value>
  </const>
  <const name="TIPO_SUPPORT_UNKNOWN" type="Integer" file="UnBurningUtility.pas" line="14">
    <value>
      $0
    </value>
  </const>
  <const name="TIPO_SUPPORT_CD" type="Integer" file="UnBurningUtility.pas" line="15">
    <value>
      $1
    </value>
  </const>
  <const name="TIPO_SUPPORT_DVD" type="Integer" file="UnBurningUtility.pas" line="16">
    <value>
      $2
    </value>
  </const>
  <const name="TIPO_SUPPORT_BDR" type="Integer" file="UnBurningUtility.pas" line="17">
    <value>
      $4
    </value>
  </const>
  <const name="TIPO_SUPPORT_ISO" type="Integer" file="UnBurningUtility.pas" line="18">
    <value>
      $5
    </value>
  </const>
  <const name="TIPO_SUPPORT_DVD_DL" type="Integer" file="UnBurningUtility.pas" line="19">
    <value>
      $A
    </value>
  </const>
  <function name="GetVolumeNameForVolumeMountPointA" visibility="external public" callconv="stdcall" file="UnBurningUtility.pas" line="21">
    <parameters>
      <parameter name="lpszVolumeMountPoint" type="PAnsiChar" />
      <parameter name="lpszVolumeName" type="PAnsiChar" />
      <parameter name="cchBufferLength" type="Cardinal" />
      <retval type="LongBool" />
    </parameters>
  </function>
  <function name="GetVolumeNameForVolumeMountPointW" visibility="external public" callconv="stdcall" file="UnBurningUtility.pas" line="22">
    <parameters>
      <parameter name="lpszVolumeMountPoint" type="PWideChar" />
      <parameter name="lpszVolumeName" type="PWideChar" />
      <parameter name="cchBufferLength" type="Cardinal" />
      <retval type="LongBool" />
    </parameters>
  </function>
  <function name="GetVolumeNameForVolumeMountPoint" visibility="external public" callconv="stdcall" file="UnBurningUtility.pas" line="23">
    <parameters>
      <parameter name="lpszVolumeMountPoint" type="PWideChar" />
      <parameter name="lpszVolumeName" type="PWideChar" />
      <parameter name="cchBufferLength" type="Cardinal" />
      <retval type="LongBool" />
    </parameters>
  </function>
  <function name="SHCreateStreamOnFileEx" visibility="external public" callconv="stdcall" file="UnBurningUtility.pas" line="24">
    <parameters>
      <parameter name="pszFile" type="PWideChar" />
      <parameter name="grfMode" type="Cardinal" />
      <parameter name="dwAttributes" type="Cardinal" />
      <parameter name="fCreate" type="LongBool" />
      <parameter name="pstmTemplate" type="IStream" />
      <parameter name="ppstm" type="IStream" paramflags="var" />
      <retval type="Cardinal" />
    </parameters>
  </function>
  <class name="TBurningTool" file="UnBurningUtility.pas" line="56">
    <devnotes>
      <summary>
       Class that encapsulates burning and erasing functions using the IMAPI2 interface.
      </summary>  
    </devnotes>
    <ancestor name="TObject" namespace="System">
      <methodref name="Create" visibility="public" procflags="constructor">
      </methodref>
      <methodref name="Free" visibility="public">
      </methodref>
      <methodref name="DisposeOf" visibility="public" procflags="inline">
      </methodref>
      <methodref name="InitInstance" visibility="public" procflags="class">
      </methodref>
      <methodref name="CleanupInstance" visibility="public">
      </methodref>
      <methodref name="ClassType" visibility="public" procflags="inline">
      </methodref>
      <methodref name="ClassName" visibility="public" procflags="class">
      </methodref>
      <methodref name="ClassNameIs" visibility="public" procflags="class">
      </methodref>
      <methodref name="ClassParent" visibility="public" procflags="class">
      </methodref>
      <methodref name="ClassInfo" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="InstanceSize" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="InheritsFrom" visibility="public" procflags="class">
      </methodref>
      <methodref name="MethodAddress" visibility="public" procflags="class overload">
      </methodref>
      <methodref name="MethodAddress" visibility="public" procflags="class overload">
      </methodref>
      <methodref name="MethodName" visibility="public" procflags="class">
      </methodref>
      <methodref name="QualifiedClassName" visibility="public" procflags="class">
      </methodref>
      <methodref name="FieldAddress" visibility="public" procflags="overload">
      </methodref>
      <methodref name="FieldAddress" visibility="public" procflags="overload">
      </methodref>
      <methodref name="GetInterface" visibility="public">
      </methodref>
      <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
      </methodref>
      <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="UnitName" visibility="public" procflags="class">
      </methodref>
      <methodref name="UnitScope" visibility="public" procflags="class">
      </methodref>
      <methodref name="Equals" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="GetHashCode" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="ToString" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="SafeCallException" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="AfterConstruction" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="Dispatch" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="DefaultHandler" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="NewInstance" visibility="public" procflags="class virtual">
      </methodref>
      <methodref name="FreeInstance" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="Destroy" visibility="public" procflags="destructor virtual">
      </methodref>
      <methodref name="GetDisposed" visibility="protected" procflags="inline">
      </methodref>
      <methodref name="CheckDisposed" visibility="protected" procflags="inline">
      </methodref>
      <propertyref name="Disposed" visibility="protected">
      </propertyref>
    </ancestor>
    <members>
      <field name="FListaDriveCD" type="TStringList" visibility="private" size="4" offset="4" file="UnBurningUtility.pas" line="58" />
      <field name="FCancelWriting" type="Boolean" visibility="private" size="1" offset="8" file="UnBurningUtility.pas" line="59" />
      <field name="FListaDriveDVD" type="TStringList" visibility="private" size="4" offset="12" file="UnBurningUtility.pas" line="60" />
      <field name="FListaDriveDVD_DL" type="TStringList" visibility="private" size="4" offset="16" file="UnBurningUtility.pas" line="61" />
      <field name="FListaDriveBDR" type="TStringList" visibility="private" size="4" offset="20" file="UnBurningUtility.pas" line="62" />
      <field name="FListaDriveCD_DL" type="TStringList" visibility="private" size="4" offset="24" file="UnBurningUtility.pas" line="63" />
      <field name="FDiriverList" type="TStringList" visibility="private" size="4" offset="28" file="UnBurningUtility.pas" line="64" />
      <field name="FimgListSysSmall" type="TImageList" visibility="private" size="4" offset="32" file="UnBurningUtility.pas" line="65" />
      <field name="FWriting" type="Boolean" visibility="private" size="1" offset="36" file="UnBurningUtility.pas" line="66" />
      <field name="FLastuniqueId" type="WideString" visibility="private" size="4" offset="40" file="UnBurningUtility.pas" line="67" />
      <field name="FDiscMaster" type="TMsftDiscMaster2" visibility="private" size="4" offset="44" file="UnBurningUtility.pas" line="68" />
      <field name="FDiscRecord" type="TMsftDiscRecorder2" visibility="private" size="4" offset="48" file="UnBurningUtility.pas" line="69" />
      <field name="FOnProgressBurn" type="TOnProgressBurn" visibility="private" size="8" offset="56" file="UnBurningUtility.pas" line="70" />
      <field name="FAbort" type="Boolean" visibility="private" size="1" offset="64" file="UnBurningUtility.pas" line="71" />
      <field name="FCurrentWriter" type="TMsftDiscFormat2Data" visibility="private" size="4" offset="68" file="UnBurningUtility.pas" line="72" />
      <field name="FOnLog" type="TOnLog" visibility="private" size="8" offset="72" file="UnBurningUtility.pas" line="73" />
      <field name="FEraseCDAuto" type="Boolean" visibility="private" size="1" offset="80" file="UnBurningUtility.pas" line="74" />
      <field name="FCanErase" type="Boolean" visibility="private" size="1" offset="81" file="UnBurningUtility.pas" line="75" />
      <procedure name="BuildListDrivesOfType" visibility="private" file="UnBurningUtility.pas" line="79">
        <devnotes>
          <summary>
           Procedure to create a list of drives of a certain type.
          </summary>
        </devnotes>
      </procedure>
      <function name="GetCanBurnCD" visibility="private" file="UnBurningUtility.pas" line="84">
        <devnotes>
          <summary>
           Function to check if the system can burn CD.
          </summary>
        </devnotes>
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="GetCanBurnCD_DL" visibility="private" file="UnBurningUtility.pas" line="89">
        <devnotes>
          <summary>
           Function to check if the system can burn CD with double-layer support.
          </summary>
        </devnotes>
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="GetCanBurnDVD" visibility="private" file="UnBurningUtility.pas" line="94">
        <devnotes>
          <summary>
           Function to check if the system can burn DVD.
          </summary>
        </devnotes>
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="GetCanBurnDVD_DL" visibility="private" file="UnBurningUtility.pas" line="99">
        <devnotes>
          <summary>
           Function to check if the system can burn DVD with double-layer support.
          </summary>
        </devnotes>
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="GetCanBurnDBR" visibility="private" file="UnBurningUtility.pas" line="104">
        <devnotes>
          <summary>
           Function to check if the system can burn DBR.
          </summary>
        </devnotes>
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="GetSystemCanBurn" visibility="private" file="UnBurningUtility.pas" line="109">
        <devnotes>
          <summary>
           Function to check if the system can burn any type of media.
          </summary>
        </devnotes>
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="ActiveDiskRecorder" visibility="private" file="UnBurningUtility.pas" line="116">
        <devnotes>
          <summary>
           Activates the disk recorder with the specified index.
          </summary>
           <param name="aIdexDriver">The index of the disk recorder to activate.</param>
           <returns>True if the disk recorder is successfully activated, false otherwise.</returns>    
        </devnotes>
        <parameters>
          <parameter name="aIdexDriver" type="Integer" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="IntFRecordAssigned" visibility="private" file="UnBurningUtility.pas" line="122">
        <devnotes>
          <summary>
           Checks if the FDiscRecord object is assigned.
          </summary>
           <returns>True if the FDiscRecord object is assigned, false otherwise.</returns>
        </devnotes>
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="IntFDiskMasterAssigned" visibility="private" file="UnBurningUtility.pas" line="128">
        <devnotes>
          <summary>
           Checks if the FDiscMaster object is assigned.
          </summary>
           <returns>True if the FDiscMaster object is assigned, false otherwise.</returns>
        </devnotes>
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="IntFWriterAssigned" visibility="private" file="UnBurningUtility.pas" line="135">
        <devnotes>
          <summary>
           Checks if the aDataWriter parameter is assigned to FDataWriter object.
          </summary>
           <param name="aDataWriter">The object to check if it's assigned to FDataWriter.</param>
           <returns>True if aDataWriter is assigned to FDataWriter, false otherwise.</returns>
        </devnotes>
        <parameters>
          <parameter name="aDataWriter" type="TMsftDiscFormat2Data" paramflags="var" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="FoundLetterDrive" visibility="private" file="UnBurningUtility.pas" line="143">
        <devnotes>
          <summary>
           Searches for the drive letter associated with the specified index.
          </summary>
           <param name="aIndex">The index of the drive to search for.</param>
           <param name="aLetterDrive">The drive letter associated with the specified index.</param>
           <returns>True if the drive letter is found, false otherwise.</returns>
        </devnotes>
        <parameters>
          <parameter name="aIndex" type="Integer" />
          <parameter name="aLetterDrive" type="string" paramflags="var" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="IsDriverRW" visibility="private" file="UnBurningUtility.pas" line="151">
        <devnotes>
          <summary>
           Checks if the specified drive supports the specified type of write operation.
          </summary>
           <param name="aDriveIndex">The index of the drive to check.</param>
           <param name="aSupportType">The type of support type to check for.</param>
           <returns>True if the drive supports the specified support type, false otherwise.</returns>
        </devnotes>
        <parameters>
          <parameter name="aDriveIndex" type="Integer" />
          <parameter name="aSupportType" type="Integer" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="CheckMedia" visibility="private" file="UnBurningUtility.pas" line="162">
        <devnotes>
          <summary>
           Checks the media status and availability for writing using the specified driver index and check status array.
          </summary>
          <param name="aDataWriter">A reference to the TMsftDiscFormat2Data object.</param>
          <param name="aIndexDriver">The index of the driver to use for checking the media.</param>
          <param name="aCheckStatus">An array of Word values representing the check status.</param>
          <param name="aErrorDisc">A reference to a boolean value indicating if there was an error with the disc.</param>
          <param name="aCurrentStatus">A reference to a Word value representing the current status of the media.</param>
          <returns>A boolean value indicating whether the media status and availability check was successful.</returns>    
        </devnotes>
        <parameters>
          <parameter name="aDataWriter" type="TMsftDiscFormat2Data" paramflags="var" />
          <parameter name="aIndexDriver" type="Integer" />
          <parameter name="aCheckStatus">
            <array name="aCheckStatus">
              <element type="Word" />
            </array>
          </parameter>
          <parameter name="aErrorDisc" type="Boolean" paramflags="var" />
          <parameter name="aCurrentStatus" type="Word" paramflags="var" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="isDiskEmpty" visibility="private" file="UnBurningUtility.pas" line="171">
        <devnotes>
          <summary>
          Checks if the media in the specified drive is blank.
          </summary>
          <param name="aDataWriter">A reference to the TMsftDiscFormat2Data object representing the disc to check.</param>
          <param name="aIdexDriver">The index of the drive to check.</param>
          <param name="aErrorMedia">A boolean value that indicates if there was an error while checking the disc. If set to true, the media is not considered blank.</param>
          <returns>True if the media is blank, False otherwise.</returns>    
        </devnotes>
        <parameters>
          <parameter name="aDataWriter" type="TMsftDiscFormat2Data" paramflags="var" />
          <parameter name="aIdexDriver" type="Integer" />
          <parameter name="aErrorMedia" type="Boolean" paramflags="var" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="isDiskWritable" visibility="private" file="UnBurningUtility.pas" line="180">
        <devnotes>
           <summary>
           Check if the disk is re-writable.
           </summary>
           <param name="aDataWriter">The data writer object.</param>
           <param name="aIdexDriver">The index of the selected driver.</param>
           <param name="aErrorMedia">The flag that indicates if there was an error while checking the media.</param>
           <returns>True if the disk is re-writable, False otherwise.</returns>    
        </devnotes>
        <parameters>
          <parameter name="aDataWriter" type="TMsftDiscFormat2Data" paramflags="var" />
          <parameter name="aIdexDriver" type="Integer" />
          <parameter name="aErrorMedia" type="Boolean" paramflags="var" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="CheckMediaBySupport" visibility="private" file="UnBurningUtility.pas" line="193">
        <devnotes>
           <summary>
           Checks if the media in the disc drive supports the given support type
           and returns whether it is read-write capable and provides a reference to 
           a data writer if it is.
           </summary>
           <param name="aIdexDriver">The index of the disc drive to check.</param>
           <param name="aSupportType">The support type to check for.</param>
           <param name="aIsRW">Returns true if the media is read-write capable.</param>
           <param name="aDataWriter">Returns a reference to a data writer if the media is 
           read-write capable, otherwise null.</param>
           <returns>True if the media supports the given support type, false otherwise.</returns>
        </devnotes>
        <parameters>
          <parameter name="aIdexDriver" type="Integer" />
          <parameter name="aSupportType" type="Integer" />
          <parameter name="aIsRW" type="Boolean" paramflags="var" />
          <parameter name="aDataWriter" type="TMsftDiscFormat2Data" paramflags="var" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="DiskIsPresentOnDrive" visibility="private" file="UnBurningUtility.pas" line="201">
        <devnotes>
           <summary>
           Checks if a disk is present on a given drive.
           </summary>
           <param name="aIdexDriver">The index of the drive to check.</param>
           <param name="aDataWriter">The writer object to use for the check.</param>
           <returns>True if a disk is present on the drive, False otherwise.</returns>    
        </devnotes>
        <parameters>
          <parameter name="aIdexDriver" type="Integer" />
          <parameter name="aDataWriter" type="TMsftDiscFormat2Data" paramflags="var" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <procedure name="DoOnProgressBurnCustom" visibility="private" file="UnBurningUtility.pas" line="208">
        <devnotes>
           <summary>
           Raises the OnProgressBurn event to report the progress of the burning operation.
           </summary>
           <param name="aSInfo">The current status message.</param>
           <param name="aAllowAbort">Whether or not the user is allowed to abort the operation.</param>    
        </devnotes>
        <parameters>
          <parameter name="aSInfo" type="string" paramflags="const" />
          <parameter name="aAllowAbort" type="Boolean">
            <value>
              True
            </value>
          </parameter>
        </parameters>
      </procedure>
      <function name="GetDriveTypeLabel" visibility="private" file="UnBurningUtility.pas" line="218">
        <devnotes>
          <summary>
           Returns the label of a given drive type as a string. The function takes a single input parameter, aDriveChar, which is a string representing the drive letter. 
           The function first calls the Win32 API function SHGetFileInfo to retrieve information about the drive. 
           It then calls the Win32 API function GetVolumeInformation to retrieve volume information for the drive. 
           Finally, the function returns the label of the drive as a string.
          </summary>
          <param name="aDriveChar">A string representing the drive lette.</param>
          <returns>The label of the drive as a string</returns>     
        </devnotes>
        <parameters>
          <parameter name="aDriveChar" type="string" paramflags="const" />
          <retval type="string" />
        </parameters>
      </function>
      <procedure name="IsWrittableDriver" visibility="private" file="UnBurningUtility.pas" line="229">
        <devnotes>
          <summary>
           Checks if the provided profiles support rewritable drives and sets the corresponding output flags.
          </summary>
          <param name="aSupportedProfiles">A pointer to the array of supported profiles.</param>
          <param name="aWCd">Outputs true if the device is capable of writing CDs.</param>
          <param name="aWDVD">Outputs true if the device is capable of writing DVDs.</param>
          <param name="aWBDR">Outputs true if the device is capable of writing Blu-ray discs.</param>
          <param name="aWDvd_DL">Outputs true if the device is capable of writing double-layer DVDs.</param>
          <param name="awCD_DL">Outputs true if the device is capable of writing double-layer CDs.</param>    
        </devnotes>
        <parameters>
          <parameter name="aSupportedProfiles" type="PSafeArray" />
          <parameter name="aWCd" type="Boolean" paramflags="var" />
          <parameter name="aWDVD" type="Boolean" paramflags="var" />
          <parameter name="aWBDR" type="Boolean" paramflags="var" />
          <parameter name="aWDvd_DL" type="Boolean" paramflags="var" />
          <parameter name="awCD_DL" type="Boolean" paramflags="var" />
        </parameters>
      </procedure>
      <procedure name="IsRecordableDriver" visibility="private" file="UnBurningUtility.pas" line="240">
        <devnotes>
          <summary>
           Checks if the provided profiles support recordable drives and sets the corresponding output flags.
          </summary>
          <param name="aSupportedFeaturePages">A pointer to the array of supported feature page.</param>
          <param name="aWCd">Outputs true if the device is capable of writing CDs.</param>
          <param name="aWDVD">Outputs true if the device is capable of writing DVDs.</param>
          <param name="aWBDR">Outputs true if the device is capable of writing Blu-ray discs.</param>
          <param name="aWDvd_DL">Outputs true if the device is capable of writing double-layer DVDs.</param>
          <param name="awCD_DL">Outputs true if the device is capable of writing double-layer CDs.</param>        
        </devnotes>
        <parameters>
          <parameter name="aSupportedFeaturePages" type="PSafeArray" />
          <parameter name="aWCd" type="Boolean" paramflags="var" />
          <parameter name="aWDVD" type="Boolean" paramflags="var" />
          <parameter name="aWBDR" type="Boolean" paramflags="var" />
          <parameter name="aWDvd_DL" type="Boolean" paramflags="var" />
          <parameter name="awCD_DL" type="Boolean" paramflags="var" />
        </parameters>
      </procedure>
      <procedure name="BuildListDriverType" visibility="private" file="UnBurningUtility.pas" line="252">
        <devnotes>
           <summary>
           Builds a list of driver types for a specified volume name.
           </summary>
           <param name="aVolumeName">The volume name to search for.</param>
           <param name="aWcd">Specifies if CD drives should be included.</param>
           <param name="aWdvd">Specifies if DVD drives should be included.</param>
           <param name="aWbdr">Specifies if Blu-ray drives should be included.</param>
           <param name="awdvdDL">Specifies if dual-layer DVD drives should be included.</param>
           <param name="awCD_DL">Specifies if dual-layer CD drives should be included.</param>
           <param name="aIdx">The index of the volume name in the list.</param>
        </devnotes>
        <parameters>
          <parameter name="aVolumeName" type="WideString" />
          <parameter name="aWcd" type="Boolean" />
          <parameter name="aWdvd" type="Boolean" />
          <parameter name="aWbdr" type="Boolean" />
          <parameter name="awdvdDL" type="Boolean" />
          <parameter name="awCD_DL" type="Boolean" />
          <parameter name="aIdx" type="Integer" />
        </parameters>
      </procedure>
      <function name="SetBurnVerification" visibility="private" file="UnBurningUtility.pas" line="262">
        <devnotes>
           <summary>
               Sets the burn verification level for a given MsftDiscFormat2Data object.
           </summary>
           <param name="aDataWriter">The MsftDiscFormat2Data object to set the verification level for.</param>
           <param name="aVerificationLevel">The level of burn verification to set.</param>
           <returns>
               Returns True if the burn verification level was set successfully, False otherwise.
           </returns>    
        </devnotes>
        <parameters>
          <parameter name="aDataWriter" type="TMsftDiscFormat2Data" paramflags="var" />
          <parameter name="aVerificationLevel" type="TOleEnum" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="CheckAssignedAndActivationDrive" visibility="private" file="UnBurningUtility.pas" line="269">
        <devnotes>
           <summary>
           Check if the necessary interfaces are assigned and if the specified drive is active.
           </summary>
           <param name="IndexDriver">Index of the drive to check</param>
           <returns>True if all interfaces are assigned and the specified drive is active, False otherwise</returns>    
        </devnotes>
        <parameters>
          <parameter name="IndexDriver" type="Integer" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="MngInsertDisk" visibility="private" file="UnBurningUtility.pas" line="281">
        <devnotes>
          <summary>
           Manages the insertion of a disk in the drive identified by the provided index and letter drive.
           If there is a valid and empty disk present, it returns True, otherwise, it prompts the user to insert an appropriate disk and returns False.
          </summary>
          <param name="aIdexDriver">The index of the driver to be checked.</param>
          <param name="aSupportType">The type of support the inserted disk must have.</param>
          <param name="aDataWriter">The data writer to be checked.</param>
          <param name="aLetterDrive">The letter of the drive to be checked.</param>
          <param name="aIRetry">The number of times the function has been called without success.</param>
          <returns>True if a valid and empty disk is present in the drive identified by the provided index and letter drive, False otherwise.</returns>    
        </devnotes>
        <parameters>
          <parameter name="aIdexDriver" type="Integer" />
          <parameter name="aSupportType" type="Integer" />
          <parameter name="aDataWriter" type="TMsftDiscFormat2Data" paramflags="var" />
          <parameter name="aLetterDrive" type="string" paramflags="const" />
          <parameter name="aIRetry" type="Integer" paramflags="var" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <procedure name="CreateImageListIconSystem" visibility="private" file="UnBurningUtility.pas" line="290">
        <devnotes>
          <summary>
           This method creates a small system image list of icons.
           The image list will contain icons of small size that are associated with system objects, such as files and folders. 
           The &quot;SHGetFileInfo&quot; function is used to obtain system icon information, and the &quot;TSHFileInfo&quot; record is used to hold the retrieved information.
           The &quot;SHGFI_SMALLICON&quot; flag specifies that small icons should be retrieved, and the &quot;SHGFI_SYSICONINDEX&quot; flag specifies that system image indices should be retrieved. 
           The &quot;SHGFI_PIDL&quot; flag indicates that the function should use a pointer to an item identifier list (PIDL) instead of a path name. Finally, the &quot;ShareImages&quot; property is set to &quot;True&quot; so that multiple image lists can share the same underlying system image list handle, conserving system resources.
          </summary>    
        </devnotes>
      </procedure>
      <procedure name="CreateInterListDriveByType" visibility="private" file="UnBurningUtility.pas" line="300">
        <devnotes>
          <summary>
            Creates lists of available drives by type for burning tool.
          </summary>
          <remarks>
            This method initializes several string lists to hold the drive letters of available drives by type.
            The lists include CD drives, DVD drives, dual-layer CD drives, dual-layer DVD drives, and Blu-ray drives.
            The method also creates a general driver list for use in other parts of the burning tool.
          </remarks>    
        </devnotes>
      </procedure>
      <procedure name="SearchRecordableDriver" visibility="private" file="UnBurningUtility.pas" line="304">
        <devnotes>
          <summary>
           Search for recordable drivers and builds internal lists a
          </summary>  
        </devnotes>
      </procedure>
      <procedure name="WriteIso" visibility="private" file="UnBurningUtility.pas" line="330">
        <devnotes>
          <summary>
            This procedure writes the ISO file to the given data writer.
           </summary>
          <param name="aDataWriter">
            The data writer to write the ISO file.
          </param>
          <param name="aIndexDriver">
            The index of the driver to write the ISO file.
          </param>
          <param name="aSupportType">
            The support type of the driver to write the ISO file.
          </param>
          <param name="aCaptionDisk">
            The caption of the disk to write the ISO file.
          </param>
          <param name="aPathIso">
            The path of the ISO file to be written.
          </param>
          <param name="aStatusWrite">
            The status of the writing operation.
          </param>
          <remarks>
            If the ISO file could not be loaded, the procedure will exit without doing anything.
          </remarks>    
        </devnotes>
        <parameters>
          <parameter name="aDataWriter" type="TMsftDiscFormat2Data" paramflags="var" />
          <parameter name="aIndexDriver" type="Integer" />
          <parameter name="aSupportType" type="Integer" />
          <parameter name="aCaptionDisk" type="string" paramflags="const" />
          <parameter name="aPathIso" type="string" paramflags="const" />
          <parameter name="aStatusWrite" type="TStatusBurn" paramflags="var" />
        </parameters>
      </procedure>
      <procedure name="BuilcxComboBox" visibility="private" file="UnBurningUtility.pas" line="337">
        <devnotes>
           <summary>
           Builds the specified TcxImageComboBoxItems with the items contained in the provided TStringList.
           </summary>
           <param name="aItemsCxComboBox">The TcxImageComboBoxItems to be built.</param>
           <param name="aDriverList">The TStringList containing the items to be added to the TcxImageComboBoxItems.</param>    
        </devnotes>
        <parameters>
          <parameter name="aItemsCxComboBox" type="TcxImageComboBoxItems" />
          <parameter name="aDriverList" type="TStringList" />
        </parameters>
      </procedure>
      <function name="GetMaxWriteSectorsPerSecondSupported" visibility="private" file="UnBurningUtility.pas" line="346">
        <devnotes>
           <summary>
           Gets the maximum write sectors per second supported by the specified driver and data writer.
           </summary>
           <param name="aDataWriter">The data writer object.</param>
           <param name="aIndexDriver">The index of the driver to check.</param>
           <param name="aSupportType">The type of write speed to check.</param>
           <returns>The maximum write sectors per second supported.</returns>    
        </devnotes>
        <parameters>
          <parameter name="aDataWriter" type="TMsftDiscFormat2Data" paramflags="const" />
          <parameter name="aIndexDriver" type="Integer" />
          <parameter name="aSupportType" type="Integer" />
          <retval type="Integer" />
        </parameters>
      </function>
      <procedure name="CancelWriting" visibility="private" file="UnBurningUtility.pas" line="351">
        <devnotes>
           <summary>
           Cancel the current writing process.
           </summary>
        </devnotes>
      </procedure>
      <function name="GetHumanSpeedWrite" visibility="private" file="UnBurningUtility.pas" line="359">
        <devnotes>
           <summary>
           Gets the human-readable write speed string based on the number of sectors per second and the type of supported media.
           </summary>
           <param name="aSectorForSecond">The number of sectors per second.</param>
           <param name="aSupportType">The type of supported media (CD, DVD, DVD DL, BDR).</param>
           <returns>A human-readable write speed string.</returns>    
        </devnotes>
        <parameters>
          <parameter name="aSectorForSecond" type="Integer" />
          <parameter name="aSupportType" type="Integer" />
          <retval type="string" />
        </parameters>
      </function>
      <procedure name="WriteLog" visibility="private" file="UnBurningUtility.pas" line="368">
        <devnotes>
           <summary>
           The WriteLog procedure logs a message through the FOnLog event, which is a user-defined event. 
           <param name="aFunctionName">The name of the function or procedure that generated the log message</param>
           <param name="aDescriptionName">the message to log</param>
           <param name="Level">the log level which is an enumeration that defines the severity level of the message</param>     
           <param name="IsDebug">is set to true, the message is logged only if the DEBUG conditional symbol is defined</param>
           </summary>
        </devnotes>
        <parameters>
          <parameter name="aFunctionName" type="string" paramflags="const" />
          <parameter name="aDescriptionName" type="string" paramflags="const" />
          <parameter name="Level" type="TpLivLog" />
          <parameter name="IsDebug" type="Boolean">
            <value>
              False
            </value>
          </parameter>
        </parameters>
      </procedure>
      <function name="SecondToTime" visibility="private" file="UnBurningUtility.pas" line="373">
        <devnotes>
          <summary>
           This function converts a number of seconds into a double value representing the time in hours.
          </summary>    
        </devnotes>
        <parameters>
          <parameter name="aSeconds" type="Cardinal" paramflags="const" />
          <retval type="Double" />
        </parameters>
      </function>
      <procedure name="MsftDiscFormat2DataUpdate" visibility="private" file="UnBurningUtility.pas" line="385">
        <devnotes>
          <summary>
          Event handler for IDiscFormat2Data update.
          Updates the progress of the burning process, and logs important information about the progress.
          </summary>
          <param name="ASender">The object that invoked this event handler.</param>
          <param name="object_">The IDiscFormat2Data object.</param>
          <param name="progress">The IDiscFormat2DataEventArgs object containing the progress information.</param>
          <remarks>This method is used to update the progress of a burning process using the IDiscFormat2Data interface. 
          It logs information about the progress, such as disk validation, disk formatting, laser calibration, disk writing, disk finalization, and disk verification. 
          The progress is reported using the FOnProgressBurn event.</remarks>    
        </devnotes>
        <parameters>
          <parameter name="ASender" type="TObject" />
          <parameter name="object_" type="IDispatch" paramflags="const" />
          <parameter name="progress" type="IDispatch" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="MsftEraseDataUpdate" visibility="private" file="UnBurningUtility.pas" line="394">
        <devnotes>
          <summary>
           Event handler for updating progress during disc erasing using the MsftEraseData object.
          </summary>
          <param name="ASender">The object that triggered the event.</param>
          <param name="object_">The IDispatch interface representing the MsftEraseData object.</param>
          <param name="elapsedSeconds">The number of seconds elapsed since the start of the erasing process.</param>
          <param name="estimatedTotalSeconds">The estimated total number of seconds required to complete the erasing process.</param>    
        </devnotes>
        <parameters>
          <parameter name="ASender" type="TObject" />
          <parameter name="object_" type="IDispatch" paramflags="const" />
          <parameter name="elapsedSeconds" type="Integer" />
          <parameter name="estimatedTotalSeconds" type="Integer" />
        </parameters>
      </procedure>
      <constructor name="Create" visibility="public" file="UnBurningUtility.pas" line="396">
        <parameters>
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public" file="UnBurningUtility.pas" line="397">
        <parameters>
        </parameters>
      </destructor>
      <function name="BurningDiskImage" visibility="public" file="UnBurningUtility.pas" line="408">
        <devnotes>
           <summary>
           This function burns a disk image in ISO format.
           </summary>
           <param name="aIdexDriver">Index of the driver to use.</param>
           <param name="aSupportType">Type of the supported driver.</param>
           <param name="aSPathIso">Path of the ISO file to burn.</param>
           <param name="aCaptionDisk">Caption of the disk to burn.</param>
           <param name="aCheckDisk">If set to true, verifies the disk after the burning process.</param>
           <returns>Status of the burn process.</returns>    
        </devnotes>
        <parameters>
          <parameter name="aIdexDriver" type="Integer" />
          <parameter name="aSupportType" type="Integer" />
          <parameter name="aSPathIso" type="string" paramflags="const" />
          <parameter name="aCaptionDisk" type="string" paramflags="const" />
          <parameter name="aCheckDisk" type="Boolean" />
          <retval type="TStatusBurn" />
        </parameters>
      </function>
      <function name="DriveEject" visibility="public" file="UnBurningUtility.pas" line="415">
        <devnotes>
           <summary>
           Ejects the CD/DVD drive with the specified index.
           </summary>
           <param name="aIdexDriver">The index of the CD/DVD drive to eject.</param>
           <returns>True if the operation was successful, False otherwise.</returns>    
        </devnotes>
        <parameters>
          <parameter name="aIdexDriver" type="Integer" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="EraseDisk" visibility="public" file="UnBurningUtility.pas" line="424">
        <devnotes>
           <summary>
           Erases a disk using the specified optical drive and support type.
           </summary>
           <param name="aIdexDriver">The index of the optical drive to use.</param>
           <param name="aSupportType">The support type to use for the erase operation.</param>
           <param name="aEject">Indicates whether to eject the disk after the erase operation is complete.</param>
           <returns>A Boolean value indicating whether the erase operation was successful.</returns>    
        </devnotes>
        <parameters>
          <parameter name="aIdexDriver" type="Integer" />
          <parameter name="aSupportType" type="Integer" />
          <parameter name="aEject" type="Boolean" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="CloseTray" visibility="public" file="UnBurningUtility.pas" line="431">
        <devnotes>
           <summary>
           Closes the tray of the specified optical drive.
           </summary>
           <param name="aIdexDriver">Index of the optical drive.</param>
           <returns>True if the operation was successful, False otherwise.</returns>    
        </devnotes>
        <parameters>
          <parameter name="aIdexDriver" type="Integer" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="GetIndexCDROM" visibility="public" file="UnBurningUtility.pas" line="438">
        <devnotes>
           <summary>
           Gets the index of the CD-ROM drive with the specified letter.
           </summary>
           <param name="aLetter">The letter of the CD-ROM drive.</param>
           <returns>The index of the CD-ROM drive with the specified letter, or -1 if not found.</returns>    
        </devnotes>
        <parameters>
          <parameter name="aLetter" type="string" paramflags="const" />
          <retval type="Integer" />
        </parameters>
      </function>
      <procedure name="CancelBurning" visibility="public" file="UnBurningUtility.pas" line="443">
        <devnotes>
           <summary>
           Cancel the current burning process.
           </summary>    
        </devnotes>
      </procedure>
      <function name="CreateIsoImage" visibility="public" file="UnBurningUtility.pas" line="453">
        <devnotes>
          <summary>
          Function to create an ISO image from a folder.
          </summary>
          <param name="aFolderToAdd">The folder path to create the ISO image from.</param>
          <param name="aVolumeName">The name of the volume.</param>
          <param name="aResultFile">The path and filename of the resulting ISO image.</param>
          <param name="aIMAPIDisc">The physical type of the media to use.</param>
          <returns>True if the ISO image is successfully created, False otherwise.</returns>    
        </devnotes>
        <parameters>
          <parameter name="aFolderToAdd" type="string" paramflags="const" />
          <parameter name="aVolumeName" type="string" />
          <parameter name="aResultFile" type="string" paramflags="const" />
          <parameter name="aIMAPIDisc" type="TOleEnum" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="GetBitmapDriver" visibility="public" file="UnBurningUtility.pas" line="460">
        <devnotes>
           <summary>
           Retrieves the index of the system icon associated with the specified drive, and returns it as an integer.
           </summary>
           <param name="aDrive">A string representing the drive letter of the target drive.</param>
           <returns>An integer representing the index of the system icon associated with the specified drive. Returns -1 if the image list has not been assigned.</returns>    
        </devnotes>
        <parameters>
          <parameter name="aDrive" type="string" paramflags="const" />
          <retval type="Integer" />
        </parameters>
      </function>
      <procedure name="BuildItemCD" visibility="public" file="UnBurningUtility.pas" line="466">
        <devnotes>
           <summary>
           Builds items for a TcxImageComboBox component with CDs optical drive.
           </summary>
           <param name="aItemsCxComboBox">The TcxImageComboBoxItems component to populate with items.</param>    
        </devnotes>
        <parameters>
          <parameter name="aItemsCxComboBox" type="TcxImageComboBoxItems" />
        </parameters>
      </procedure>
      <procedure name="BuildItemCD_DL" visibility="public" file="UnBurningUtility.pas" line="472">
        <devnotes>
           <summary>
           Builds items for a TcxImageComboBox component with CDs double layer optical drive.
           </summary>
           <param name="aItemsCxComboBox">The TcxImageComboBoxItems component to populate with items.</param>    
        </devnotes>
        <parameters>
          <parameter name="aItemsCxComboBox" type="TcxImageComboBoxItems" />
        </parameters>
      </procedure>
      <procedure name="BuildItemDVD" visibility="public" file="UnBurningUtility.pas" line="478">
        <devnotes>
           <summary>
           Builds items for a TcxImageComboBox component with DVSs optical drive.
           </summary>
           <param name="aItemsCxComboBox">The TcxImageComboBoxItems component to populate with items.</param>        
        </devnotes>
        <parameters>
          <parameter name="aItemsCxComboBox" type="TcxImageComboBoxItems" />
        </parameters>
      </procedure>
      <procedure name="BuildItemBDR" visibility="public" file="UnBurningUtility.pas" line="484">
        <devnotes>
           <summary>
           Builds items for a TcxImageComboBox component with Blu-ray optical drive.
           </summary>
           <param name="aItemsCxComboBox">The TcxImageComboBoxItems component to populate with items.</param>        
        </devnotes>
        <parameters>
          <parameter name="aItemsCxComboBox" type="TcxImageComboBoxItems" />
        </parameters>
      </procedure>
      <procedure name="BuildItemDVD_DL" visibility="public" file="UnBurningUtility.pas" line="490">
        <devnotes>
           <summary>
           Builds items for a TcxImageComboBox component with DVDs double layer optical drive.
           </summary>
           <param name="aItemsCxComboBox">The TcxImageComboBoxItems component to populate with items.</param>        
        </devnotes>
        <parameters>
          <parameter name="aItemsCxComboBox" type="TcxImageComboBoxItems" />
        </parameters>
      </procedure>
      <procedure name="BuilcxComboBoxAll" visibility="public" file="UnBurningUtility.pas" line="496">
        <devnotes>
           <summary>
           Builds items for a TcxImageComboBox component with all optical drive.
           </summary>
           <param name="aItemsCxComboBox">The TcxImageComboBoxItems component to populate with items.</param>        
        </devnotes>
        <parameters>
          <parameter name="aItemsCxComboBox" type="TcxImageComboBoxItems" />
        </parameters>
      </procedure>
      <property name="CanBurnCD" visibility="public" read="GetCanBurnCD" type="Boolean" file="UnBurningUtility.pas" line="505">
        <devnotes>
           <summary>
           Property indicating whether the device can burn CDs.
           </summary>
           <remarks>
           The property is read-only and returns a boolean value.
           </remarks>
        </devnotes>
      </property>
      <property name="CanBurnCD_DL" visibility="public" read="GetCanBurnCD_DL" type="Boolean" file="UnBurningUtility.pas" line="513">
        <devnotes>
           <summary>
           Property indicating whether the device can burn CDs double layer.
           </summary>
           <remarks>
           The property is read-only and returns a boolean value.
           </remarks>
        </devnotes>
      </property>
      <property name="CanBurnDVD" visibility="public" read="GetCanBurnDVD" type="Boolean" file="UnBurningUtility.pas" line="521">
        <devnotes>
           <summary>
           Property indicating whether the device can burn DVDs.
           </summary>
           <remarks>
           The property is read-only and returns a boolean value.
           </remarks>    
        </devnotes>
      </property>
      <property name="CanBurnDVD_DL" visibility="public" read="GetCanBurnDVD_DL" type="Boolean" file="UnBurningUtility.pas" line="529">
        <devnotes>
           <summary>
           Property indicating whether the device can burn DVDs double layer.
           </summary>
           <remarks>
           The property is read-only and returns a boolean value.
           </remarks>       
        </devnotes>
      </property>
      <property name="CanBurnBDR" visibility="public" read="GetCanBurnDBR" type="Boolean" file="UnBurningUtility.pas" line="537">
        <devnotes>
           <summary>
           Property indicating whether the device can burn Blu-ray disk.
           </summary>
           <remarks>
           The property is read-only and returns a boolean value.
           </remarks>       
        </devnotes>
      </property>
      <property name="SystemCanBurn" visibility="public" read="GetSystemCanBurn" type="Boolean" file="UnBurningUtility.pas" line="542">
        <devnotes>
          <summary>
           Property that returns True if the system can burn discs, False otherwise.
          </summary>    
        </devnotes>
      </property>
      <property name="ImageListDriver" visibility="public" read="FimgListSysSmall" type="TImageList" file="UnBurningUtility.pas" line="547">
        <devnotes>
          <summary>
           Property that returns the image list containing the small system icons for drives.
          </summary>
        </devnotes>
      </property>
      <property name="EraseCDAuto" visibility="public" read="FEraseCDAuto" write="FEraseCDAuto" type="Boolean" file="UnBurningUtility.pas" line="552">
        <devnotes>
          <summary>
           Property that determines whether the CD will be automatically erased before burning a new image.
          </summary>    
        </devnotes>
      </property>
      <property name="CanErase" visibility="public" read="FCanErase" write="FCanErase" type="Boolean" file="UnBurningUtility.pas" line="557">
        <devnotes>
          <summary>
           Property that determines whether the CD can be erased.
          </summary>    
        </devnotes>
      </property>
      <event name="OnProgressBurn" visibility="public" read="FOnProgressBurn" write="FOnProgressBurn" type="TOnProgressBurn" file="UnBurningUtility.pas" line="563">
        <devnotes>
           <summary>
           Event that is fired to report the progress of the burning operation.
           </summary> 
        </devnotes>
      </event>
      <event name="OnLog" visibility="public" read="FOnLog" write="FOnLog" type="TOnLog" file="UnBurningUtility.pas" line="568">
        <devnotes>
           <summary>
           Event that is fired to report the logs of the burning operation.
           </summary>
        </devnotes>
      </event>
    </members>
  </class>
</namespace>
